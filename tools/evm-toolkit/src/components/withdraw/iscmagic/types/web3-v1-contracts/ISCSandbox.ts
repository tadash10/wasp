/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export interface ISCSandbox extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): ISCSandbox;
  clone(): ISCSandbox;
  methods: {
    allow(
      target: string,
      allowance: [
        number | string | BN,
        [[string | number[]], number | string | BN][],
        (string | number[])[]
      ]
    ): NonPayableTransactionObject<void>;

    call(
      contractHname: number | string | BN,
      entryPoint: number | string | BN,
      params: [[string | number[], string | number[]][]],
      allowance: [
        number | string | BN,
        [[string | number[]], number | string | BN][],
        (string | number[])[]
      ]
    ): NonPayableTransactionObject<[[string, string][]]>;

    callView(
      contractHname: number | string | BN,
      entryPoint: number | string | BN,
      params: [[string | number[], string | number[]][]]
    ): NonPayableTransactionObject<[[string, string][]]>;

    erc20NativeTokensAddress(
      foundrySN: number | string | BN
    ): NonPayableTransactionObject<string>;

    erc20NativeTokensFoundrySerialNumber(
      addr: string
    ): NonPayableTransactionObject<string>;

    erc721NFTCollectionAddress(
      collectionID: string | number[]
    ): NonPayableTransactionObject<string>;

    getAllowance(
      from: string,
      to: string
    ): NonPayableTransactionObject<[string, [[string], string][], string[]]>;

    getAllowanceFrom(
      addr: string
    ): NonPayableTransactionObject<[string, [[string], string][], string[]]>;

    getAllowanceTo(
      target: string
    ): NonPayableTransactionObject<[string, [[string], string][], string[]]>;

    getBaseTokenProperties(): NonPayableTransactionObject<
      [string, string, string, string]
    >;

    getChainID(): NonPayableTransactionObject<string>;

    getChainOwnerID(): NonPayableTransactionObject<[string]>;

    getEntropy(): NonPayableTransactionObject<string>;

    getIRC27NFTData(
      id: string | number[]
    ): NonPayableTransactionObject<
      [
        [string, [string], string, [string]],
        [string, string, string, string, string]
      ]
    >;

    getNFTData(
      id: string | number[]
    ): NonPayableTransactionObject<[string, [string], string, [string]]>;

    getNativeTokenID(
      foundrySN: number | string | BN
    ): NonPayableTransactionObject<[string]>;

    getNativeTokenScheme(
      foundrySN: number | string | BN
    ): NonPayableTransactionObject<[string, string, string]>;

    getRequestID(): NonPayableTransactionObject<[string]>;

    getSenderAccount(): NonPayableTransactionObject<[string]>;

    getTimestampUnixSeconds(): NonPayableTransactionObject<string>;

    send(
      targetAddress: [string | number[]],
      assets: [
        number | string | BN,
        [[string | number[]], number | string | BN][],
        (string | number[])[]
      ],
      adjustMinimumStorageDeposit: boolean,
      metadata: [
        number | string | BN,
        number | string | BN,
        [[string | number[], string | number[]][]],
        [
          number | string | BN,
          [[string | number[]], number | string | BN][],
          (string | number[])[]
        ],
        number | string | BN
      ],
      sendOptions: [
        number | string | BN,
        [number | string | BN, [string | number[]]]
      ]
    ): NonPayableTransactionObject<void>;

    takeAllowedFunds(
      addr: string,
      allowance: [
        number | string | BN,
        [[string | number[]], number | string | BN][],
        (string | number[])[]
      ]
    ): NonPayableTransactionObject<void>;

    triggerEvent(s: string): NonPayableTransactionObject<void>;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}
